
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/96a60b8e-184f-4797-b1ae-e99c68623d92 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  int occupancyCounter;
  CloudPercentage moisture;
  bool fanStatus;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Ultrasonic.h>
#include <DHT.h>

//Pin for controlling the relay
#define relayPin 1 
//Pin for controlling the temperature and moisture sensor
#define DHTPIN 2 
//Which type the sensor is
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

//Ultrasonic sensor setup
Ultrasonic leftSensor(4, 5);    //trig is 4 and echo is 5
Ultrasonic rightSensor(7, 6); //trig is 7 and echo is 6

//Variables for distance
int leftDistance = 0;
int rightDistance = 0;
int activationDistance = 20; //Determines how far something has to be before the sensors detects it

//Variables for keeping track of triggered sensors
bool leftSensorTriggered = false;
bool rightSensorTriggered = false;

void setup() {
  pinMode(relayPin, OUTPUT); //relay controll pin
  //Initalize the temperature and humidity
  dht.begin();
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  //Read the sensor values and outputs the distance in cm
  leftDistance = leftSensor.read();
  rightDistance = rightSensor.read();

  //Reads humidity and temperature
  moisture = dht.readHumidity();
  temperature = dht.readTemperature();
  
  //Debugging for sensors
  /*
  Serial.print("Distance left: ");
  Serial.print(leftDistance);
  Serial.print("Distance right: ");
  Serial.println(rightDistance);
  Serial.println(occupancyCounter); //Prints people inside
  */
  
  //If the first sensor detects something within 60 cm and no sensors have been triggered yet, set leftSensorTriggered to true
  if (leftDistance < activationDistance && !leftSensorTriggered && !rightSensorTriggered) {
    leftSensorTriggered = true;
  }

  // If the second sensor detects something within 60 cm after the first sensor was triggered (indicating movement in the correct order),
  // set rightSensorTriggered to true, increment the 'inside' count, and increment the 'total' count
  else if (rightDistance < activationDistance && leftSensorTriggered && !rightSensorTriggered) {
    rightSensorTriggered = true;
    occupancyCounter++;
  }

  // If the second sensor detects something within 60 cm and neither sensor has been triggered (indicating reverse movement),
  // set rightSensorTriggered to true
  else if (rightDistance < activationDistance && !leftSensorTriggered && !rightSensorTriggered) {
    rightSensorTriggered = true;
  }

  // If the first sensor detects something within 60 cm after the second sensor was triggered (indicating movement in reverse order),
  // set leftSensorTriggered to true and decrement the 'peopleInside' count
  else if (rightDistance < activationDistance && !leftSensorTriggered && rightSensorTriggered) {
    leftSensorTriggered = true;
    occupancyCounter--;
  }

  //reseting boolean values for next movement
  if (leftSensorTriggered == true && rightSensorTriggered==true) {
    leftSensorTriggered = false;
    rightSensorTriggered = false;
    delay(500);
  }

  //Triggering the fan at specified parameters
  if (occupancyCounter > 5 || temperature > 25 || moisture > 70) {
    digitalWrite(relayPin, HIGH);
    fanStatus = true;
  }

  else {
    digitalWrite(relayPin, LOW);
    fanStatus = false;
  }
  
  //Minor delay to prevent overload
  delay(10);
}
  







/*
  Since OccupancyCounter is READ_WRITE variable, onOccupancyCounterChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOccupancyCounterChange()  {
  // Add your code here to act upon OccupancyCounter change
}

/*
  Since Moisture is READ_WRITE variable, onMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMoistureChange()  {
  // Add your code here to act upon Moisture change
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}


/*
  Since FanStatus is READ_WRITE variable, onFanStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanStatusChange()  {
  // Add your code here to act upon FanStatus change
}
